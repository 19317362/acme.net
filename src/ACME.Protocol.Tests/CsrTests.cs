using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using ACME.Protocol.Asn1;
using Xunit;
using FluentAssertions;

namespace ACME.Protocol.Tests
{
    public class CsrTests
    {
        [Fact]
        public void Should_serialize_a_certificate_signing_request()
        {
            //// Arrange
            //var publicKey = new byte[]
            //{
            //     0x00, 0xD8, 0xF1, 0xBE, 0x4B, 0x45, 0xE3, 0x28, 0xB5, 0x65, 0xFA, 0x8A, 0x2F, 0x74, 0x7C, 0x4F,
            //     0x26, 0xDF, 0xD4, 0x47, 0x1F, 0x0B, 0x7B, 0xEE, 0x24, 0xC5, 0xA5, 0xEF, 0xEC, 0xD7, 0x53, 0xCA,
            //     0x67, 0x5B, 0xF0, 0xE1, 0x36, 0x54, 0x41, 0xBC, 0xF8, 0x79, 0x8F, 0xD2, 0xA3, 0xAB, 0xF8, 0x60,
            //     0xC2, 0xDF, 0x78, 0x87, 0xDB, 0x5F, 0x96, 0xC8, 0x86, 0x9C, 0xC5, 0xF4, 0x57, 0x3B, 0xD0, 0xD5,
            //     0xD3, 0x20, 0x2C, 0xBD, 0xFF, 0xD7, 0x0B, 0xD4, 0xF9, 0x24, 0xEC, 0xE0, 0x45, 0x6A, 0xDD, 0xD5,
            //     0x89, 0x60, 0x83, 0x44, 0x25, 0x60, 0xF5, 0x9D, 0x00, 0xE0, 0x8E, 0x1D, 0xA6, 0x04, 0xDF, 0x1A,
            //     0x3B, 0xCF, 0x1D, 0xFF, 0x07, 0x57, 0xF8, 0x4F, 0x5A, 0xB3, 0x53, 0x8C, 0x9A, 0xC6, 0x49, 0xF0,
            //     0xB5, 0xCE, 0x49, 0x1C, 0x1C, 0x30, 0x3B, 0x6A, 0x10, 0xC4, 0x22, 0xEF, 0xA6, 0x5A, 0x05, 0xE0,
            //     0x06, 0x76, 0x4C, 0xD5, 0xB2, 0x75, 0x0B, 0x2A, 0x27, 0x30, 0xE2, 0x74, 0x3D, 0x4A, 0x2A, 0x8D,
            //     0x92, 0xA9, 0x4F, 0x83, 0x5B, 0xF6, 0xA3, 0xAB, 0xE7, 0xDD, 0x47, 0x9A, 0x3D, 0x4A, 0x61, 0x4F,
            //     0xBF, 0x59, 0x09, 0x60, 0x9F, 0xFB, 0x92, 0x61, 0x16, 0xD6, 0x34, 0xDA, 0x89, 0x2C, 0x7B, 0x49,
            //     0xFD, 0x8B, 0xE2, 0x97, 0x7E, 0x67, 0x8C, 0x0B, 0xBE, 0x81, 0xED, 0xF4, 0x5C, 0xAF, 0x14, 0xBC,
            //     0xCC, 0x24, 0x22, 0xEF, 0x96, 0xF5, 0xA7, 0x18, 0xD2, 0xEA, 0x8B, 0x87, 0x9F, 0x76, 0xAA, 0x48,
            //     0x39, 0x57, 0xF0, 0x5F, 0xCB, 0x1F, 0x8C, 0x3F, 0x4A, 0xB9, 0x15, 0x08, 0x85, 0x8D, 0x1D, 0x14,
            //     0xC1, 0xD1, 0x3D, 0x1C, 0x3D, 0x39, 0xE8, 0x51, 0x62, 0x95, 0xD9, 0x95, 0x8D, 0x2F, 0x9B, 0xFB,
            //     0x27, 0xE4, 0xB8, 0xA7, 0x79, 0x11, 0x87, 0x9D, 0x73, 0xD7, 0x8C, 0x94, 0x05, 0xF5, 0x25, 0xF9,
            //     0x5D
            //};

            var data = new CertificateRequestData("test.startliste.info")
            {
                C = "DE",
                S = "NRW",
                L = "Werther",
                O = "Aero Club Bünde",
                OU = ""                
            };

            var serializer = new Asn1Serializer();
            var sut = new CertificateRequestAsn1DEREncoder(serializer);
            

            // Act
            var csr = sut.Encode(data);            
            var der = sut.EncodeAsDER(data);
            var base64 = sut.EncodeAsBase64(data);
            var bytes = serializer.Serialize(csr).ToArray();

            // Assert            

            File.WriteAllBytes(@"r:\request.der", der);
            File.WriteAllText(@"r:\request.txt", base64);
            bytes.Should().NotBeNull();

            // openssl req -in r:\request.txt -noout -text
        }

        [Fact]
        public void Convert_xml_key_to_pem()
        {
            // Arrange            
            var sut = new KeyManager();
            var key = sut.GetOrCreateKey("test.startliste.info");

            // Act
            sut.SaveKeyAsPEM(key.ExportParameters(true), "test.startliste.info");

            // Assert
            File.Exists(@"C:\github\ACME.net\test.startliste.info.pem").Should().BeTrue();
        }

        [Fact]
        public void Create_pfx()
        {
            // Arrange            
            var sut = new Pkcs12();

            // Act
            sut.CreatePfxFile("test.startliste.info", @"C:\github\ACME.net\test.startliste.info.cer", "test", @"r:\acme\test.startliste.info.pfx");

            // Assert
            File.Exists(@"r:\acme\test.startliste.info.pfx").Should().BeTrue();
        }
    }
}